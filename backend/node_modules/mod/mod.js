function remainder__truncated_division(dividend, divisor)
{
	return dividend - divisor * Math.trunc(dividend / divisor);
	// dividend % divisor ?
}
function remainder__ceiling_division(dividend, divisor)
{
	return dividend - divisor * Math.floor(dividend / divisor);
}
function remainder__round_division(dividend, divisor)
{
	return dividend - divisor * Math.floor(dividend / divisor);
}
function remainder__floored_division(dividend, divisor)
{
	return dividend - divisor * Math.floor(dividend / divisor);
	// Donald Knuth's floored division
}
function remainder__Euclidean_division(dividend, divisor)
{
	return dividend - Math.abs(divisor) * Math.floor(dividend / Math.abs(divisor));
}

module.exports = {
		truncated: remainder__truncated_division,
		withDividendSign: remainder__truncated_division,

		ceiling: remainder__ceiling_division,

		round: remainder__round_division,

		floored: remainder__floored_division,
		withDivisorSign: remainder__floored_division,

		Euclidean: remainder__Euclidean_division,
		nonnegativeAlways: remainder__Euclidean_division
	};

Object.freeze(module.exports);